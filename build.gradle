import org.bxteam.runserver.RunServerTask
import java.security.MessageDigest

plugins {
    id "java"
    id "eclipse"
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.8"
    id "org.bxteam.runserver" version "1.2.2"
}

group = "me.itstautvydas"
version = "1.0.0"

// Variables
def targetJavaVersion = 17
def paperTargetJavaVersion = 21
def props = [
        "version": project.version,
        "config_version": md5(file("src/main/resources/configuration.json")),
        "name": project.name,
        "lower_cased_name": project.name.toLowerCase(),
        "website": "https://itstautvydas.me",
        "description": "Swap player names or UUID, use online UUIDs for offline mode!"
]

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        url = "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

dependencies {
    compileOnly "org.projectlombok:lombok:1.18.38"
    annotationProcessor "org.projectlombok:lombok:1.18.38"

    annotationProcessor("com.velocitypowered:velocity-api:3.4.0-SNAPSHOT")

    compileOnly "net.md-5:bungeecord-api:1.21-R0.4-SNAPSHOT"
    compileOnly "com.velocitypowered:velocity-api:3.4.0-SNAPSHOT"
    // Paper/Folia API are being added below
}

// Java compiling
java {
    toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.release.set(targetJavaVersion)
}

// Configuration docs processing
sourceSets {
    processor {
        java.srcDir 'src/processor/java'
        resources.srcDir 'src/processor/resources'
    }
    main {
        compileClasspath += sourceSets.processor.output
        runtimeClasspath  += sourceSets.processor.output
    }
}

configurations {
    processorAnnotationProcessor
}

dependencies {
    processorCompileOnly "org.projectlombok:lombok:1.18.38"
    processorAnnotationProcessor "org.projectlombok:lombok:1.18.38"
    processorImplementation "com.google.code.gson:gson:2.11.0"
    processorImplementation "com.google.auto.service:auto-service-annotations:1.1.1"
    processorAnnotationProcessor "com.google.auto.service:auto-service:1.1.1"
    annotationProcessor files(sourceSets.processor.output)
}

tasks.named('compileProcessorJava') {
    options.annotationProcessorPath = configurations.processorAnnotationProcessor
}

tasks.register("copyConfigurationDocs", Copy) {
    from(layout.buildDirectory.file("classes/java/main/ConfigurationDocs.generated.md"))
    into(layout.projectDirectory.file("wiki"))
    rename { "Configuration.md" }
}

tasks.named('compileJava') {
    dependsOn "copyConfigurationDocs"
    dependsOn tasks.named('compileProcessorJava')
}

tasks.named("jar") {
    exclude("ConfigurationDocs.generated.md")
}

// Testing
sourceSets {
    test {
        java {
            srcDirs "src/test/java"
        }
    }
}

dependencies {
    testImplementation "com.google.code.gson:gson:2.11.0"

    testImplementation 'org.junit.jupiter:junit-jupiter:5.11.3'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
    useJUnitPlatform()
}

tasks.named("jar") {
    dependsOn("test")
}

// Resources processing
def generateTemplates = tasks.register("generateTemplates", Copy) { task ->
    task.inputs.properties props
    task.from file("src/main/templates")
    task.into layout.buildDirectory.dir("generated/sources/templates")
    task.expand props
}

processResources {
    inputs.properties props
    filesMatching("**/*") {
        expand props
    }
}

sourceSets.main.java.srcDir(generateTemplates.map {
    it.outputs
})

project.idea.project.settings.taskTriggers.afterSync generateTemplates
project.eclipse.synchronizationTasks(generateTemplates)

// Compile Paper/Folia plugin classes with Java 21
sourceSets.main.java {
    exclude "me/itstautvydas/${project.name.toLowerCase()}/loader/${project.name}Paper.java",
            "me/itstautvydas/${project.name.toLowerCase()}/multiplatform/wrapper/PaperPluginWrapper.java",
            "me/itstautvydas/${project.name.toLowerCase()}/multiplatform/wrapper/FoliaPluginWrapper.java"
}

sourceSets {
    paper {
        java {
            srcDir "src/main/java"
            include "me/itstautvydas/${project.name.toLowerCase()}/loader/${project.name}Paper.java"
            include "me/itstautvydas/${project.name.toLowerCase()}/multiplatform/wrapper/PaperPluginWrapper.java"
        }
        compileClasspath += sourceSets.main.output + sourceSets.main.compileClasspath
        runtimeClasspath += output + compileClasspath
    }
    folia {
        java {
            srcDir "src/main/java"
            include "me/itstautvydas/${project.name.toLowerCase()}/loader/${project.name}Paper.java"
            include "me/itstautvydas/${project.name.toLowerCase()}/multiplatform/wrapper/FoliaPluginWrapper.java"
            include "me/itstautvydas/${project.name.toLowerCase()}/multiplatform/wrapper/PaperPluginWrapper.java"
        }
        compileClasspath += sourceSets.main.output + sourceSets.main.compileClasspath
        runtimeClasspath += output + compileClasspath
    }
}

dependencies {
    foliaCompileOnly "dev.folia:folia-api:1.21.8-R0.1-SNAPSHOT"
    paperCompileOnly "io.papermc.paper:paper-api:1.21.8-R0.1-SNAPSHOT"
}

tasks.named("compilePaperJava") {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(paperTargetJavaVersion)
    }
    options.release = paperTargetJavaVersion
}

tasks.named("compileFoliaJava") {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(paperTargetJavaVersion)
    }
    options.release = paperTargetJavaVersion
}

tasks.jar {
    dependsOn(tasks.named("compileFoliaJava"))
    dependsOn(tasks.named("compilePaperJava"))
    from(sourceSets.folia.output) {
        into("META-INF/versions/${paperTargetJavaVersion}")
    }
    // No need to include classes from paper because folia has them all already
    manifest {
        attributes("Multi-Release": "true")
    }
}

// Functions

static def md5(File file) {
    MessageDigest md = MessageDigest.getInstance("MD5")
    file.withInputStream { is ->
        byte[] buffer = new byte[8192]
        int read
        while ((read = is.read(buffer)) > 0)
            md.update(buffer, 0, read)
    }
    return md.digest().encodeHex().toString()
}

// Testing

tasks.register("BungeeCord", RunServerTask) {
    group = "minecraft-server-test"
    description = "Run a BungeeCord server"

    serverType = "BUNGEECORD"
    serverVersion("1.21")
    noGui(true)
    acceptMojangEula()
}

tasks.register("Paper", RunServerTask) {
    group = "minecraft-server-test"
    description = "Run a Paper server"

    serverType = "PAPER"
    serverVersion("1.21.8")
    noGui(true)
    acceptMojangEula()
}

tasks.register("Canvas", RunServerTask) {
    group = "minecraft-server-test"
    description = "Run a Canvas server"

    serverType = "CANVAS"
    serverVersion("1.21.8")
    noGui(true)
    acceptMojangEula()
}

tasks.register("Velocity", RunServerTask) {
    group = "minecraft-server-test"
    description = "Run a Velocity server"

    serverType = "VELOCITY"
    serverVersion("3.4.0-SNAPSHOT")
    noGui(true)
    acceptMojangEula()
}
